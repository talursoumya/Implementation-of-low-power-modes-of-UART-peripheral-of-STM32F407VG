
Sleep_on_exit_tim_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a70  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001bf8  08001bf8  00002bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c00  08001c00  00003034  2**0
                  CONTENTS
  4 .ARM          00000008  08001c00  08001c00  00002c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001c08  08001c08  00003034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c08  08001c08  00002c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c0c  08001c0c  00002c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08001c10  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003034  2**0
                  CONTENTS
 10 .bss          000000b0  20000034  20000034  00003034  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  00003034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf34  00000000  00000000  00003064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000191e  00000000  00000000  0000ef98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  000108b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020bf5  00000000  00000000  00011400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d55f  00000000  00000000  00031ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca6b1  00000000  00000000  0003f554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109c05  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 000008cc  00000000  00000000  00109c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002f6c  00000000  00000000  0010a514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0010d480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001be0 	.word	0x08001be0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	08001be0 	.word	0x08001be0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SysTick_Handler>:
#include "main.h"
extern TIM_HandleTypeDef htimer6;
extern UART_HandleTypeDef huart2;

void SysTick_Handler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004cc:	f000 f98e 	bl	80007ec <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004d0:	f000 fabd 	bl	8000a4e <HAL_SYSTICK_IRQHandler>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <TIM6_DAC_IRQHandler>:



void TIM6_DAC_IRQHandler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80004dc:	2201      	movs	r2, #1
 80004de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004e2:	4807      	ldr	r0, [pc, #28]	@ (8000500 <TIM6_DAC_IRQHandler+0x28>)
 80004e4:	f000 fc5c 	bl	8000da0 <HAL_GPIO_WritePin>
	HAL_TIM_IRQHandler(&htimer6);
 80004e8:	4806      	ldr	r0, [pc, #24]	@ (8000504 <TIM6_DAC_IRQHandler+0x2c>)
 80004ea:	f000 fd67 	bl	8000fbc <HAL_TIM_IRQHandler>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004f4:	4802      	ldr	r0, [pc, #8]	@ (8000500 <TIM6_DAC_IRQHandler+0x28>)
 80004f6:	f000 fc53 	bl	8000da0 <HAL_GPIO_WritePin>

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40020000 	.word	0x40020000
 8000504:	20000050 	.word	0x20000050

08000508 <main>:
extern uint8_t some_data[];



int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  HAL_Init();
 800050c:	f000 f91c 	bl	8000748 <HAL_Init>

  GPIO_Init();
 8000510:	f000 f810 	bl	8000534 <GPIO_Init>

  UART2_Init();
 8000514:	f000 f874 	bl	8000600 <UART2_Init>


  TIMER6_Init();
 8000518:	f000 f83c 	bl	8000594 <TIMER6_Init>

  //lets start with fresh status register of timer to avoid any spurious timer interrupts
  TIM6->SR = 0;
 800051c:	4b03      	ldr	r3, [pc, #12]	@ (800052c <main+0x24>)
 800051e:	2200      	movs	r2, #0
 8000520:	611a      	str	r2, [r3, #16]

  //lets start timer-polling method
  HAL_TIM_Base_Start_IT(&htimer6);
 8000522:	4803      	ldr	r0, [pc, #12]	@ (8000530 <main+0x28>)
 8000524:	f000 fcda 	bl	8000edc <HAL_TIM_Base_Start_IT>

  while(1);
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <main+0x20>
 800052c:	40001000 	.word	0x40001000
 8000530:	20000050 	.word	0x20000050

08000534 <GPIO_Init>:
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}


void GPIO_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	603b      	str	r3, [r7, #0]
 800053e:	4b13      	ldr	r3, [pc, #76]	@ (800058c <GPIO_Init+0x58>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a12      	ldr	r2, [pc, #72]	@ (800058c <GPIO_Init+0x58>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b10      	ldr	r3, [pc, #64]	@ (800058c <GPIO_Init+0x58>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 8000556:	2320      	movs	r3, #32
 8000558:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800055a:	2301      	movs	r3, #1
 800055c:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	4619      	mov	r1, r3
 8000566:	480a      	ldr	r0, [pc, #40]	@ (8000590 <GPIO_Init+0x5c>)
 8000568:	f000 fa7e 	bl	8000a68 <HAL_GPIO_Init>


	ledgpio.Pin = GPIO_PIN_12;
 800056c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000570:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000572:	2301      	movs	r3, #1
 8000574:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	4619      	mov	r1, r3
 800057e:	4804      	ldr	r0, [pc, #16]	@ (8000590 <GPIO_Init+0x5c>)
 8000580:	f000 fa72 	bl	8000a68 <HAL_GPIO_Init>


}
 8000584:	bf00      	nop
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40023800 	.word	0x40023800
 8000590:	40020000 	.word	0x40020000

08000594 <TIMER6_Init>:

void TIMER6_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 8000598:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <TIMER6_Init+0x2c>)
 800059a:	4a0a      	ldr	r2, [pc, #40]	@ (80005c4 <TIMER6_Init+0x30>)
 800059c:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 4999;
 800059e:	4b08      	ldr	r3, [pc, #32]	@ (80005c0 <TIMER6_Init+0x2c>)
 80005a0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80005a4:	605a      	str	r2, [r3, #4]
	//htimer6.Init.Period = 64000-1;
	//htimer6.Init.Period = 6400-1;
	htimer6.Init.Period = 32-1;
 80005a6:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <TIMER6_Init+0x2c>)
 80005a8:	221f      	movs	r2, #31
 80005aa:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&htimer6) != HAL_OK)
 80005ac:	4804      	ldr	r0, [pc, #16]	@ (80005c0 <TIMER6_Init+0x2c>)
 80005ae:	f000 fc45 	bl	8000e3c <HAL_TIM_Base_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <TIMER6_Init+0x28>
	{
		Error_handler();
 80005b8:	f000 f81e 	bl	80005f8 <Error_handler>
	}
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000050 	.word	0x20000050
 80005c4:	40001000 	.word	0x40001000

080005c8 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htimer6)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	if(HAL_UART_Transmit(&huart2,(uint8_t*)some_data,(uint16_t)strlen((char*)some_data),HAL_MAX_DELAY)!= HAL_OK);
 80005d0:	4807      	ldr	r0, [pc, #28]	@ (80005f0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80005d2:	f7ff fdf9 	bl	80001c8 <strlen>
 80005d6:	4603      	mov	r3, r0
 80005d8:	b29a      	uxth	r2, r3
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	4904      	ldr	r1, [pc, #16]	@ (80005f0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80005e0:	4804      	ldr	r0, [pc, #16]	@ (80005f4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80005e2:	f000 ff1d 	bl	8001420 <HAL_UART_Transmit>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000000 	.word	0x20000000
 80005f4:	20000098 	.word	0x20000098

080005f8 <Error_handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  while(1);
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <Error_handler+0x4>

08000600 <UART2_Init>:
}


void UART2_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000604:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <UART2_Init+0x44>)
 8000606:	4a10      	ldr	r2, [pc, #64]	@ (8000648 <UART2_Init+0x48>)
 8000608:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800060a:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <UART2_Init+0x44>)
 800060c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000610:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000612:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <UART2_Init+0x44>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b0a      	ldr	r3, [pc, #40]	@ (8000644 <UART2_Init+0x44>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061e:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <UART2_Init+0x44>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000624:	4b07      	ldr	r3, [pc, #28]	@ (8000644 <UART2_Init+0x44>)
 8000626:	2200      	movs	r2, #0
 8000628:	619a      	str	r2, [r3, #24]
  huart2.Init.Mode = UART_MODE_TX;
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <UART2_Init+0x44>)
 800062c:	2208      	movs	r2, #8
 800062e:	615a      	str	r2, [r3, #20]
  if ( HAL_UART_Init(&huart2) != HAL_OK )
 8000630:	4804      	ldr	r0, [pc, #16]	@ (8000644 <UART2_Init+0x44>)
 8000632:	f000 fe9b 	bl	800136c <HAL_UART_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <UART2_Init+0x40>
  {
    //There is a problem
    Error_handler();
 800063c:	f7ff ffdc 	bl	80005f8 <Error_handler>
  }
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000098 	.word	0x20000098
 8000648:	40004400 	.word	0x40004400

0800064c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  //Here will do low level processor specific inits.
  //1. Set up the priority grouping of the arm cortex mx processor
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000650:	2003      	movs	r0, #3
 8000652:	f000 f9bb 	bl	80009cc <HAL_NVIC_SetPriorityGrouping>

  //2. Enable the required system exceptions of the arm cortex mx processor
  SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <HAL_MspInit+0x40>)
 8000658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800065a:	4a0c      	ldr	r2, [pc, #48]	@ (800068c <HAL_MspInit+0x40>)
 800065c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000660:	6253      	str	r3, [r2, #36]	@ 0x24

  //3. configure the priority for the system exceptions
  HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	f06f 000b 	mvn.w	r0, #11
 800066a:	f000 f9ba 	bl	80009e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	f06f 000a 	mvn.w	r0, #10
 8000676:	f000 f9b4 	bl	80009e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	f06f 0009 	mvn.w	r0, #9
 8000682:	f000 f9ae 	bl	80009e2 <HAL_NVIC_SetPriority>
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	//1.enable the clock for TIM6 peripheral

	__HAL_RCC_TIM6_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <HAL_TIM_Base_MspInit+0x3c>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	4a0a      	ldr	r2, [pc, #40]	@ (80006cc <HAL_TIM_Base_MspInit+0x3c>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a8:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <HAL_TIM_Base_MspInit+0x3c>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	f003 0310 	and.w	r3, r3, #16
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]

	//2.enable IRQ of TIM6

	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006b4:	2036      	movs	r0, #54	@ 0x36
 80006b6:	f000 f9b0 	bl	8000a1a <HAL_NVIC_EnableIRQ>

	//3. Setup the priority
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	210f      	movs	r1, #15
 80006be:	2036      	movs	r0, #54	@ 0x36
 80006c0:	f000 f98f 	bl	80009e2 <HAL_NVIC_SetPriority>
}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800

080006d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <SystemInit+0x20>)
 80006d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006da:	4a05      	ldr	r2, [pc, #20]	@ (80006f0 <SystemInit+0x20>)
 80006dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80006f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800072c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80006f8:	f7ff ffea 	bl	80006d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006fe:	490d      	ldr	r1, [pc, #52]	@ (8000734 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000700:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800070c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000712:	4a0a      	ldr	r2, [pc, #40]	@ (800073c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000714:	4c0a      	ldr	r4, [pc, #40]	@ (8000740 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000722:	f001 fa39 	bl	8001b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000726:	f7ff feef 	bl	8000508 <main>
  bx  lr    
 800072a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800072c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000734:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000738:	08001c10 	.word	0x08001c10
  ldr r2, =_sbss
 800073c:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000740:	200000e4 	.word	0x200000e4

08000744 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000744:	e7fe      	b.n	8000744 <ADC_IRQHandler>
	...

08000748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <HAL_Init+0x40>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0d      	ldr	r2, [pc, #52]	@ (8000788 <HAL_Init+0x40>)
 8000752:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000756:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000758:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <HAL_Init+0x40>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0a      	ldr	r2, [pc, #40]	@ (8000788 <HAL_Init+0x40>)
 800075e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000762:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000764:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <HAL_Init+0x40>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a07      	ldr	r2, [pc, #28]	@ (8000788 <HAL_Init+0x40>)
 800076a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800076e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000770:	2003      	movs	r0, #3
 8000772:	f000 f92b 	bl	80009cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000776:	2000      	movs	r0, #0
 8000778:	f000 f808 	bl	800078c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800077c:	f7ff ff66 	bl	800064c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023c00 	.word	0x40023c00

0800078c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000794:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <HAL_InitTick+0x54>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <HAL_InitTick+0x58>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f943 	bl	8000a36 <HAL_SYSTICK_Config>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e00e      	b.n	80007d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b0f      	cmp	r3, #15
 80007be:	d80a      	bhi.n	80007d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c0:	2200      	movs	r2, #0
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295
 80007c8:	f000 f90b 	bl	80009e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007cc:	4a06      	ldr	r2, [pc, #24]	@ (80007e8 <HAL_InitTick+0x5c>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007d2:	2300      	movs	r3, #0
 80007d4:	e000      	b.n	80007d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000028 	.word	0x20000028
 80007e4:	20000030 	.word	0x20000030
 80007e8:	2000002c 	.word	0x2000002c

080007ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <HAL_IncTick+0x20>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <HAL_IncTick+0x24>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	4a04      	ldr	r2, [pc, #16]	@ (8000810 <HAL_IncTick+0x24>)
 80007fe:	6013      	str	r3, [r2, #0]
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000030 	.word	0x20000030
 8000810:	200000e0 	.word	0x200000e0

08000814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return uwTick;
 8000818:	4b03      	ldr	r3, [pc, #12]	@ (8000828 <HAL_GetTick+0x14>)
 800081a:	681b      	ldr	r3, [r3, #0]
}
 800081c:	4618      	mov	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	200000e0 	.word	0x200000e0

0800082c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000854:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800085c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085e:	4a04      	ldr	r2, [pc, #16]	@ (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	60d3      	str	r3, [r2, #12]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000878:	4b04      	ldr	r3, [pc, #16]	@ (800088c <__NVIC_GetPriorityGrouping+0x18>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	0a1b      	lsrs	r3, r3, #8
 800087e:	f003 0307 	and.w	r3, r3, #7
}
 8000882:	4618      	mov	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	db0b      	blt.n	80008ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	f003 021f 	and.w	r2, r3, #31
 80008a8:	4907      	ldr	r1, [pc, #28]	@ (80008c8 <__NVIC_EnableIRQ+0x38>)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	095b      	lsrs	r3, r3, #5
 80008b0:	2001      	movs	r0, #1
 80008b2:	fa00 f202 	lsl.w	r2, r0, r2
 80008b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000e100 	.word	0xe000e100

080008cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	6039      	str	r1, [r7, #0]
 80008d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	db0a      	blt.n	80008f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	490c      	ldr	r1, [pc, #48]	@ (8000918 <__NVIC_SetPriority+0x4c>)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	0112      	lsls	r2, r2, #4
 80008ec:	b2d2      	uxtb	r2, r2
 80008ee:	440b      	add	r3, r1
 80008f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f4:	e00a      	b.n	800090c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4908      	ldr	r1, [pc, #32]	@ (800091c <__NVIC_SetPriority+0x50>)
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	f003 030f 	and.w	r3, r3, #15
 8000902:	3b04      	subs	r3, #4
 8000904:	0112      	lsls	r2, r2, #4
 8000906:	b2d2      	uxtb	r2, r2
 8000908:	440b      	add	r3, r1
 800090a:	761a      	strb	r2, [r3, #24]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	e000e100 	.word	0xe000e100
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000920:	b480      	push	{r7}
 8000922:	b089      	sub	sp, #36	@ 0x24
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	f1c3 0307 	rsb	r3, r3, #7
 800093a:	2b04      	cmp	r3, #4
 800093c:	bf28      	it	cs
 800093e:	2304      	movcs	r3, #4
 8000940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3304      	adds	r3, #4
 8000946:	2b06      	cmp	r3, #6
 8000948:	d902      	bls.n	8000950 <NVIC_EncodePriority+0x30>
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	3b03      	subs	r3, #3
 800094e:	e000      	b.n	8000952 <NVIC_EncodePriority+0x32>
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	f04f 32ff 	mov.w	r2, #4294967295
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43da      	mvns	r2, r3
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	401a      	ands	r2, r3
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000968:	f04f 31ff 	mov.w	r1, #4294967295
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	fa01 f303 	lsl.w	r3, r1, r3
 8000972:	43d9      	mvns	r1, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000978:	4313      	orrs	r3, r2
         );
}
 800097a:	4618      	mov	r0, r3
 800097c:	3724      	adds	r7, #36	@ 0x24
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000998:	d301      	bcc.n	800099e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099a:	2301      	movs	r3, #1
 800099c:	e00f      	b.n	80009be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800099e:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <SysTick_Config+0x40>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a6:	210f      	movs	r1, #15
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f7ff ff8e 	bl	80008cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b0:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <SysTick_Config+0x40>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b6:	4b04      	ldr	r3, [pc, #16]	@ (80009c8 <SysTick_Config+0x40>)
 80009b8:	2207      	movs	r2, #7
 80009ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	e000e010 	.word	0xe000e010

080009cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ff29 	bl	800082c <__NVIC_SetPriorityGrouping>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f4:	f7ff ff3e 	bl	8000874 <__NVIC_GetPriorityGrouping>
 80009f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	6978      	ldr	r0, [r7, #20]
 8000a00:	f7ff ff8e 	bl	8000920 <NVIC_EncodePriority>
 8000a04:	4602      	mov	r2, r0
 8000a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff5d 	bl	80008cc <__NVIC_SetPriority>
}
 8000a12:	bf00      	nop
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4603      	mov	r3, r0
 8000a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff31 	bl	8000890 <__NVIC_EnableIRQ>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff ffa2 	bl	8000988 <SysTick_Config>
 8000a44:	4603      	mov	r3, r0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a52:	f000 f802 	bl	8000a5a <HAL_SYSTICK_Callback>
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b089      	sub	sp, #36	@ 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
 8000a82:	e16b      	b.n	8000d5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a84:	2201      	movs	r2, #1
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	697a      	ldr	r2, [r7, #20]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	f040 815a 	bne.w	8000d56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f003 0303 	and.w	r3, r3, #3
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d005      	beq.n	8000aba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d130      	bne.n	8000b1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43db      	mvns	r3, r3
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	68da      	ldr	r2, [r3, #12]
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000af0:	2201      	movs	r2, #1
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	4013      	ands	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	091b      	lsrs	r3, r3, #4
 8000b06:	f003 0201 	and.w	r2, r3, #1
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f003 0303 	and.w	r3, r3, #3
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	d017      	beq.n	8000b58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	2203      	movs	r2, #3
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f003 0303 	and.w	r3, r3, #3
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d123      	bne.n	8000bac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	08da      	lsrs	r2, r3, #3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3208      	adds	r2, #8
 8000b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	f003 0307 	and.w	r3, r3, #7
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	220f      	movs	r2, #15
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	4013      	ands	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	691a      	ldr	r2, [r3, #16]
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	08da      	lsrs	r2, r3, #3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3208      	adds	r2, #8
 8000ba6:	69b9      	ldr	r1, [r7, #24]
 8000ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0203 	and.w	r2, r3, #3
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	f000 80b4 	beq.w	8000d56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b60      	ldr	r3, [pc, #384]	@ (8000d74 <HAL_GPIO_Init+0x30c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf6:	4a5f      	ldr	r2, [pc, #380]	@ (8000d74 <HAL_GPIO_Init+0x30c>)
 8000bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bfe:	4b5d      	ldr	r3, [pc, #372]	@ (8000d74 <HAL_GPIO_Init+0x30c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c0a:	4a5b      	ldr	r2, [pc, #364]	@ (8000d78 <HAL_GPIO_Init+0x310>)
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	089b      	lsrs	r3, r3, #2
 8000c10:	3302      	adds	r3, #2
 8000c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f003 0303 	and.w	r3, r3, #3
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	220f      	movs	r2, #15
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43db      	mvns	r3, r3
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a52      	ldr	r2, [pc, #328]	@ (8000d7c <HAL_GPIO_Init+0x314>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d02b      	beq.n	8000c8e <HAL_GPIO_Init+0x226>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a51      	ldr	r2, [pc, #324]	@ (8000d80 <HAL_GPIO_Init+0x318>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d025      	beq.n	8000c8a <HAL_GPIO_Init+0x222>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a50      	ldr	r2, [pc, #320]	@ (8000d84 <HAL_GPIO_Init+0x31c>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d01f      	beq.n	8000c86 <HAL_GPIO_Init+0x21e>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a4f      	ldr	r2, [pc, #316]	@ (8000d88 <HAL_GPIO_Init+0x320>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d019      	beq.n	8000c82 <HAL_GPIO_Init+0x21a>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a4e      	ldr	r2, [pc, #312]	@ (8000d8c <HAL_GPIO_Init+0x324>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d013      	beq.n	8000c7e <HAL_GPIO_Init+0x216>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a4d      	ldr	r2, [pc, #308]	@ (8000d90 <HAL_GPIO_Init+0x328>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d00d      	beq.n	8000c7a <HAL_GPIO_Init+0x212>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a4c      	ldr	r2, [pc, #304]	@ (8000d94 <HAL_GPIO_Init+0x32c>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d007      	beq.n	8000c76 <HAL_GPIO_Init+0x20e>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a4b      	ldr	r2, [pc, #300]	@ (8000d98 <HAL_GPIO_Init+0x330>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d101      	bne.n	8000c72 <HAL_GPIO_Init+0x20a>
 8000c6e:	2307      	movs	r3, #7
 8000c70:	e00e      	b.n	8000c90 <HAL_GPIO_Init+0x228>
 8000c72:	2308      	movs	r3, #8
 8000c74:	e00c      	b.n	8000c90 <HAL_GPIO_Init+0x228>
 8000c76:	2306      	movs	r3, #6
 8000c78:	e00a      	b.n	8000c90 <HAL_GPIO_Init+0x228>
 8000c7a:	2305      	movs	r3, #5
 8000c7c:	e008      	b.n	8000c90 <HAL_GPIO_Init+0x228>
 8000c7e:	2304      	movs	r3, #4
 8000c80:	e006      	b.n	8000c90 <HAL_GPIO_Init+0x228>
 8000c82:	2303      	movs	r3, #3
 8000c84:	e004      	b.n	8000c90 <HAL_GPIO_Init+0x228>
 8000c86:	2302      	movs	r3, #2
 8000c88:	e002      	b.n	8000c90 <HAL_GPIO_Init+0x228>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <HAL_GPIO_Init+0x228>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	69fa      	ldr	r2, [r7, #28]
 8000c92:	f002 0203 	and.w	r2, r2, #3
 8000c96:	0092      	lsls	r2, r2, #2
 8000c98:	4093      	lsls	r3, r2
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ca0:	4935      	ldr	r1, [pc, #212]	@ (8000d78 <HAL_GPIO_Init+0x310>)
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	089b      	lsrs	r3, r3, #2
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cae:	4b3b      	ldr	r3, [pc, #236]	@ (8000d9c <HAL_GPIO_Init+0x334>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d003      	beq.n	8000cd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cd2:	4a32      	ldr	r2, [pc, #200]	@ (8000d9c <HAL_GPIO_Init+0x334>)
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cd8:	4b30      	ldr	r3, [pc, #192]	@ (8000d9c <HAL_GPIO_Init+0x334>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000cfc:	4a27      	ldr	r2, [pc, #156]	@ (8000d9c <HAL_GPIO_Init+0x334>)
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d02:	4b26      	ldr	r3, [pc, #152]	@ (8000d9c <HAL_GPIO_Init+0x334>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d26:	4a1d      	ldr	r2, [pc, #116]	@ (8000d9c <HAL_GPIO_Init+0x334>)
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d9c <HAL_GPIO_Init+0x334>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d50:	4a12      	ldr	r2, [pc, #72]	@ (8000d9c <HAL_GPIO_Init+0x334>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	61fb      	str	r3, [r7, #28]
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	2b0f      	cmp	r3, #15
 8000d60:	f67f ae90 	bls.w	8000a84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	3724      	adds	r7, #36	@ 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40013800 	.word	0x40013800
 8000d7c:	40020000 	.word	0x40020000
 8000d80:	40020400 	.word	0x40020400
 8000d84:	40020800 	.word	0x40020800
 8000d88:	40020c00 	.word	0x40020c00
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40021400 	.word	0x40021400
 8000d94:	40021800 	.word	0x40021800
 8000d98:	40021c00 	.word	0x40021c00
 8000d9c:	40013c00 	.word	0x40013c00

08000da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	807b      	strh	r3, [r7, #2]
 8000dac:	4613      	mov	r3, r2
 8000dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000db0:	787b      	ldrb	r3, [r7, #1]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000db6:	887a      	ldrh	r2, [r7, #2]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000dbc:	e003      	b.n	8000dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000dbe:	887b      	ldrh	r3, [r7, #2]
 8000dc0:	041a      	lsls	r2, r3, #16
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	619a      	str	r2, [r3, #24]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	@ (8000de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000028 	.word	0x20000028

08000dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000df0:	f7ff fff0 	bl	8000dd4 <HAL_RCC_GetHCLKFreq>
 8000df4:	4602      	mov	r2, r0
 8000df6:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	0a9b      	lsrs	r3, r3, #10
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	4903      	ldr	r1, [pc, #12]	@ (8000e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e02:	5ccb      	ldrb	r3, [r1, r3]
 8000e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	08001bf8 	.word	0x08001bf8

08000e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000e18:	f7ff ffdc 	bl	8000dd4 <HAL_RCC_GetHCLKFreq>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	0b5b      	lsrs	r3, r3, #13
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	4903      	ldr	r1, [pc, #12]	@ (8000e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e2a:	5ccb      	ldrb	r3, [r1, r3]
 8000e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40023800 	.word	0x40023800
 8000e38:	08001bf8 	.word	0x08001bf8

08000e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e041      	b.n	8000ed2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d106      	bne.n	8000e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff fc14 	bl	8000690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3304      	adds	r3, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	f000 f9b6 	bl	80011ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2201      	movs	r2, #1
 8000e84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2201      	movs	r2, #1
 8000e94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d001      	beq.n	8000ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e04e      	b.n	8000f92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0201 	orr.w	r2, r2, #1
 8000f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a23      	ldr	r2, [pc, #140]	@ (8000fa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d022      	beq.n	8000f5c <HAL_TIM_Base_Start_IT+0x80>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f1e:	d01d      	beq.n	8000f5c <HAL_TIM_Base_Start_IT+0x80>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d018      	beq.n	8000f5c <HAL_TIM_Base_Start_IT+0x80>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d013      	beq.n	8000f5c <HAL_TIM_Base_Start_IT+0x80>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a1c      	ldr	r2, [pc, #112]	@ (8000fac <HAL_TIM_Base_Start_IT+0xd0>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d00e      	beq.n	8000f5c <HAL_TIM_Base_Start_IT+0x80>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d009      	beq.n	8000f5c <HAL_TIM_Base_Start_IT+0x80>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a19      	ldr	r2, [pc, #100]	@ (8000fb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d004      	beq.n	8000f5c <HAL_TIM_Base_Start_IT+0x80>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a18      	ldr	r2, [pc, #96]	@ (8000fb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d111      	bne.n	8000f80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d010      	beq.n	8000f90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f042 0201 	orr.w	r2, r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f7e:	e007      	b.n	8000f90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f042 0201 	orr.w	r2, r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	40000400 	.word	0x40000400
 8000fa8:	40000800 	.word	0x40000800
 8000fac:	40000c00 	.word	0x40000c00
 8000fb0:	40010400 	.word	0x40010400
 8000fb4:	40014000 	.word	0x40014000
 8000fb8:	40001800 	.word	0x40001800

08000fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d020      	beq.n	8001020 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d01b      	beq.n	8001020 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f06f 0202 	mvn.w	r2, #2
 8000ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f8d2 	bl	80011b0 <HAL_TIM_IC_CaptureCallback>
 800100c:	e005      	b.n	800101a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f8c4 	bl	800119c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f8d5 	bl	80011c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	2b00      	cmp	r3, #0
 8001028:	d020      	beq.n	800106c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	2b00      	cmp	r3, #0
 8001032:	d01b      	beq.n	800106c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f06f 0204 	mvn.w	r2, #4
 800103c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2202      	movs	r2, #2
 8001042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f8ac 	bl	80011b0 <HAL_TIM_IC_CaptureCallback>
 8001058:	e005      	b.n	8001066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f89e 	bl	800119c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f8af 	bl	80011c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	2b00      	cmp	r3, #0
 8001074:	d020      	beq.n	80010b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	2b00      	cmp	r3, #0
 800107e:	d01b      	beq.n	80010b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f06f 0208 	mvn.w	r2, #8
 8001088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2204      	movs	r2, #4
 800108e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f886 	bl	80011b0 <HAL_TIM_IC_CaptureCallback>
 80010a4:	e005      	b.n	80010b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 f878 	bl	800119c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 f889 	bl	80011c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d020      	beq.n	8001104 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f003 0310 	and.w	r3, r3, #16
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d01b      	beq.n	8001104 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f06f 0210 	mvn.w	r2, #16
 80010d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2208      	movs	r2, #8
 80010da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f860 	bl	80011b0 <HAL_TIM_IC_CaptureCallback>
 80010f0:	e005      	b.n	80010fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 f852 	bl	800119c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 f863 	bl	80011c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00c      	beq.n	8001128 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d007      	beq.n	8001128 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f06f 0201 	mvn.w	r2, #1
 8001120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff fa50 	bl	80005c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00c      	beq.n	800114c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001138:	2b00      	cmp	r3, #0
 800113a:	d007      	beq.n	800114c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f906 	bl	8001358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00c      	beq.n	8001170 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800115c:	2b00      	cmp	r3, #0
 800115e:	d007      	beq.n	8001170 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f834 	bl	80011d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	f003 0320 	and.w	r3, r3, #32
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00c      	beq.n	8001194 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f003 0320 	and.w	r3, r3, #32
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f06f 0220 	mvn.w	r2, #32
 800118c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 f8d8 	bl	8001344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a46      	ldr	r2, [pc, #280]	@ (8001318 <TIM_Base_SetConfig+0x12c>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d013      	beq.n	800122c <TIM_Base_SetConfig+0x40>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800120a:	d00f      	beq.n	800122c <TIM_Base_SetConfig+0x40>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a43      	ldr	r2, [pc, #268]	@ (800131c <TIM_Base_SetConfig+0x130>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d00b      	beq.n	800122c <TIM_Base_SetConfig+0x40>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a42      	ldr	r2, [pc, #264]	@ (8001320 <TIM_Base_SetConfig+0x134>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d007      	beq.n	800122c <TIM_Base_SetConfig+0x40>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a41      	ldr	r2, [pc, #260]	@ (8001324 <TIM_Base_SetConfig+0x138>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d003      	beq.n	800122c <TIM_Base_SetConfig+0x40>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a40      	ldr	r2, [pc, #256]	@ (8001328 <TIM_Base_SetConfig+0x13c>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d108      	bne.n	800123e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a35      	ldr	r2, [pc, #212]	@ (8001318 <TIM_Base_SetConfig+0x12c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d02b      	beq.n	800129e <TIM_Base_SetConfig+0xb2>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800124c:	d027      	beq.n	800129e <TIM_Base_SetConfig+0xb2>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a32      	ldr	r2, [pc, #200]	@ (800131c <TIM_Base_SetConfig+0x130>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d023      	beq.n	800129e <TIM_Base_SetConfig+0xb2>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a31      	ldr	r2, [pc, #196]	@ (8001320 <TIM_Base_SetConfig+0x134>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d01f      	beq.n	800129e <TIM_Base_SetConfig+0xb2>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a30      	ldr	r2, [pc, #192]	@ (8001324 <TIM_Base_SetConfig+0x138>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d01b      	beq.n	800129e <TIM_Base_SetConfig+0xb2>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a2f      	ldr	r2, [pc, #188]	@ (8001328 <TIM_Base_SetConfig+0x13c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d017      	beq.n	800129e <TIM_Base_SetConfig+0xb2>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a2e      	ldr	r2, [pc, #184]	@ (800132c <TIM_Base_SetConfig+0x140>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d013      	beq.n	800129e <TIM_Base_SetConfig+0xb2>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a2d      	ldr	r2, [pc, #180]	@ (8001330 <TIM_Base_SetConfig+0x144>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d00f      	beq.n	800129e <TIM_Base_SetConfig+0xb2>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a2c      	ldr	r2, [pc, #176]	@ (8001334 <TIM_Base_SetConfig+0x148>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d00b      	beq.n	800129e <TIM_Base_SetConfig+0xb2>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a2b      	ldr	r2, [pc, #172]	@ (8001338 <TIM_Base_SetConfig+0x14c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d007      	beq.n	800129e <TIM_Base_SetConfig+0xb2>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a2a      	ldr	r2, [pc, #168]	@ (800133c <TIM_Base_SetConfig+0x150>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d003      	beq.n	800129e <TIM_Base_SetConfig+0xb2>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a29      	ldr	r2, [pc, #164]	@ (8001340 <TIM_Base_SetConfig+0x154>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d108      	bne.n	80012b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80012a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a10      	ldr	r2, [pc, #64]	@ (8001318 <TIM_Base_SetConfig+0x12c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d003      	beq.n	80012e4 <TIM_Base_SetConfig+0xf8>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a12      	ldr	r2, [pc, #72]	@ (8001328 <TIM_Base_SetConfig+0x13c>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d103      	bne.n	80012ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	691a      	ldr	r2, [r3, #16]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d105      	bne.n	800130a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	f023 0201 	bic.w	r2, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	611a      	str	r2, [r3, #16]
  }
}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40010000 	.word	0x40010000
 800131c:	40000400 	.word	0x40000400
 8001320:	40000800 	.word	0x40000800
 8001324:	40000c00 	.word	0x40000c00
 8001328:	40010400 	.word	0x40010400
 800132c:	40014000 	.word	0x40014000
 8001330:	40014400 	.word	0x40014400
 8001334:	40014800 	.word	0x40014800
 8001338:	40001800 	.word	0x40001800
 800133c:	40001c00 	.word	0x40001c00
 8001340:	40002000 	.word	0x40002000

08001344 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e042      	b.n	8001404 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d106      	bne.n	8001398 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f83a 	bl	800140c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2224      	movs	r2, #36	@ 0x24
 800139c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80013ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f97d 	bl	80016b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80013c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	695a      	ldr	r2, [r3, #20]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80013d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80013e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2220      	movs	r2, #32
 80013f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2220      	movs	r2, #32
 80013f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af02      	add	r7, sp, #8
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	4613      	mov	r3, r2
 800142e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b20      	cmp	r3, #32
 800143e:	d175      	bne.n	800152c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <HAL_UART_Transmit+0x2c>
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e06e      	b.n	800152e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2221      	movs	r2, #33	@ 0x21
 800145a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800145e:	f7ff f9d9 	bl	8000814 <HAL_GetTick>
 8001462:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	88fa      	ldrh	r2, [r7, #6]
 8001468:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	88fa      	ldrh	r2, [r7, #6]
 800146e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001478:	d108      	bne.n	800148c <HAL_UART_Transmit+0x6c>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d104      	bne.n	800148c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	e003      	b.n	8001494 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001494:	e02e      	b.n	80014f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2200      	movs	r2, #0
 800149e:	2180      	movs	r1, #128	@ 0x80
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f000 f848 	bl	8001536 <UART_WaitOnFlagUntilTimeout>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2220      	movs	r2, #32
 80014b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e03a      	b.n	800152e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10b      	bne.n	80014d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	3302      	adds	r3, #2
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	e007      	b.n	80014e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	781a      	ldrb	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	3301      	adds	r3, #1
 80014e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	3b01      	subs	r3, #1
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1cb      	bne.n	8001496 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2200      	movs	r2, #0
 8001506:	2140      	movs	r1, #64	@ 0x40
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 f814 	bl	8001536 <UART_WaitOnFlagUntilTimeout>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2220      	movs	r2, #32
 8001518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e006      	b.n	800152e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2220      	movs	r2, #32
 8001524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	e000      	b.n	800152e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800152c:	2302      	movs	r3, #2
  }
}
 800152e:	4618      	mov	r0, r3
 8001530:	3720      	adds	r7, #32
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	4613      	mov	r3, r2
 8001544:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001546:	e03b      	b.n	80015c0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154e:	d037      	beq.n	80015c0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001550:	f7ff f960 	bl	8000814 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	6a3a      	ldr	r2, [r7, #32]
 800155c:	429a      	cmp	r2, r3
 800155e:	d302      	bcc.n	8001566 <UART_WaitOnFlagUntilTimeout+0x30>
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e03a      	b.n	80015e0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d023      	beq.n	80015c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	2b80      	cmp	r3, #128	@ 0x80
 800157c:	d020      	beq.n	80015c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	2b40      	cmp	r3, #64	@ 0x40
 8001582:	d01d      	beq.n	80015c0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b08      	cmp	r3, #8
 8001590:	d116      	bne.n	80015c0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f000 f81d 	bl	80015e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2208      	movs	r2, #8
 80015b2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e00f      	b.n	80015e0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	4013      	ands	r3, r2
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	bf0c      	ite	eq
 80015d0:	2301      	moveq	r3, #1
 80015d2:	2300      	movne	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	461a      	mov	r2, r3
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d0b4      	beq.n	8001548 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b095      	sub	sp, #84	@ 0x54
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	330c      	adds	r3, #12
 80015f6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015fa:	e853 3f00 	ldrex	r3, [r3]
 80015fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001602:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	330c      	adds	r3, #12
 800160e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001610:	643a      	str	r2, [r7, #64]	@ 0x40
 8001612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001614:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001616:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001618:	e841 2300 	strex	r3, r2, [r1]
 800161c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800161e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1e5      	bne.n	80015f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3314      	adds	r3, #20
 800162a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	e853 3f00 	ldrex	r3, [r3]
 8001632:	61fb      	str	r3, [r7, #28]
   return(result);
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f023 0301 	bic.w	r3, r3, #1
 800163a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3314      	adds	r3, #20
 8001642:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001644:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001648:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800164a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800164c:	e841 2300 	strex	r3, r2, [r1]
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1e5      	bne.n	8001624 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165c:	2b01      	cmp	r3, #1
 800165e:	d119      	bne.n	8001694 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	330c      	adds	r3, #12
 8001666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	e853 3f00 	ldrex	r3, [r3]
 800166e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f023 0310 	bic.w	r3, r3, #16
 8001676:	647b      	str	r3, [r7, #68]	@ 0x44
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	330c      	adds	r3, #12
 800167e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001680:	61ba      	str	r2, [r7, #24]
 8001682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001684:	6979      	ldr	r1, [r7, #20]
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	e841 2300 	strex	r3, r2, [r1]
 800168c:	613b      	str	r3, [r7, #16]
   return(result);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1e5      	bne.n	8001660 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2220      	movs	r2, #32
 8001698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80016a2:	bf00      	nop
 80016a4:	3754      	adds	r7, #84	@ 0x54
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016b4:	b0c0      	sub	sp, #256	@ 0x100
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80016c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80016cc:	68d9      	ldr	r1, [r3, #12]
 80016ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	ea40 0301 	orr.w	r3, r0, r1
 80016d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80016da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	431a      	orrs	r2, r3
 80016f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80016fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001708:	f021 010c 	bic.w	r1, r1, #12
 800170c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001716:	430b      	orrs	r3, r1
 8001718:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800171a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800172a:	6999      	ldr	r1, [r3, #24]
 800172c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	ea40 0301 	orr.w	r3, r0, r1
 8001736:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b8f      	ldr	r3, [pc, #572]	@ (800197c <UART_SetConfig+0x2cc>)
 8001740:	429a      	cmp	r2, r3
 8001742:	d005      	beq.n	8001750 <UART_SetConfig+0xa0>
 8001744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b8d      	ldr	r3, [pc, #564]	@ (8001980 <UART_SetConfig+0x2d0>)
 800174c:	429a      	cmp	r2, r3
 800174e:	d104      	bne.n	800175a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001750:	f7ff fb60 	bl	8000e14 <HAL_RCC_GetPCLK2Freq>
 8001754:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001758:	e003      	b.n	8001762 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800175a:	f7ff fb47 	bl	8000dec <HAL_RCC_GetPCLK1Freq>
 800175e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800176c:	f040 810c 	bne.w	8001988 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001774:	2200      	movs	r2, #0
 8001776:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800177a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800177e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001782:	4622      	mov	r2, r4
 8001784:	462b      	mov	r3, r5
 8001786:	1891      	adds	r1, r2, r2
 8001788:	65b9      	str	r1, [r7, #88]	@ 0x58
 800178a:	415b      	adcs	r3, r3
 800178c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800178e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001792:	4621      	mov	r1, r4
 8001794:	eb12 0801 	adds.w	r8, r2, r1
 8001798:	4629      	mov	r1, r5
 800179a:	eb43 0901 	adc.w	r9, r3, r1
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017b2:	4690      	mov	r8, r2
 80017b4:	4699      	mov	r9, r3
 80017b6:	4623      	mov	r3, r4
 80017b8:	eb18 0303 	adds.w	r3, r8, r3
 80017bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80017c0:	462b      	mov	r3, r5
 80017c2:	eb49 0303 	adc.w	r3, r9, r3
 80017c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80017ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80017d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80017da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80017de:	460b      	mov	r3, r1
 80017e0:	18db      	adds	r3, r3, r3
 80017e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80017e4:	4613      	mov	r3, r2
 80017e6:	eb42 0303 	adc.w	r3, r2, r3
 80017ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80017ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80017f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80017f4:	f7fe fcf0 	bl	80001d8 <__aeabi_uldivmod>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4b61      	ldr	r3, [pc, #388]	@ (8001984 <UART_SetConfig+0x2d4>)
 80017fe:	fba3 2302 	umull	r2, r3, r3, r2
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	011c      	lsls	r4, r3, #4
 8001806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800180a:	2200      	movs	r2, #0
 800180c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001810:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001814:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001818:	4642      	mov	r2, r8
 800181a:	464b      	mov	r3, r9
 800181c:	1891      	adds	r1, r2, r2
 800181e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001820:	415b      	adcs	r3, r3
 8001822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001824:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001828:	4641      	mov	r1, r8
 800182a:	eb12 0a01 	adds.w	sl, r2, r1
 800182e:	4649      	mov	r1, r9
 8001830:	eb43 0b01 	adc.w	fp, r3, r1
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001840:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001844:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001848:	4692      	mov	sl, r2
 800184a:	469b      	mov	fp, r3
 800184c:	4643      	mov	r3, r8
 800184e:	eb1a 0303 	adds.w	r3, sl, r3
 8001852:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001856:	464b      	mov	r3, r9
 8001858:	eb4b 0303 	adc.w	r3, fp, r3
 800185c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800186c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001870:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001874:	460b      	mov	r3, r1
 8001876:	18db      	adds	r3, r3, r3
 8001878:	643b      	str	r3, [r7, #64]	@ 0x40
 800187a:	4613      	mov	r3, r2
 800187c:	eb42 0303 	adc.w	r3, r2, r3
 8001880:	647b      	str	r3, [r7, #68]	@ 0x44
 8001882:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001886:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800188a:	f7fe fca5 	bl	80001d8 <__aeabi_uldivmod>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4611      	mov	r1, r2
 8001894:	4b3b      	ldr	r3, [pc, #236]	@ (8001984 <UART_SetConfig+0x2d4>)
 8001896:	fba3 2301 	umull	r2, r3, r3, r1
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	2264      	movs	r2, #100	@ 0x64
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	1acb      	subs	r3, r1, r3
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80018aa:	4b36      	ldr	r3, [pc, #216]	@ (8001984 <UART_SetConfig+0x2d4>)
 80018ac:	fba3 2302 	umull	r2, r3, r3, r2
 80018b0:	095b      	lsrs	r3, r3, #5
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80018b8:	441c      	add	r4, r3
 80018ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80018be:	2200      	movs	r2, #0
 80018c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80018c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80018c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80018cc:	4642      	mov	r2, r8
 80018ce:	464b      	mov	r3, r9
 80018d0:	1891      	adds	r1, r2, r2
 80018d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80018d4:	415b      	adcs	r3, r3
 80018d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80018dc:	4641      	mov	r1, r8
 80018de:	1851      	adds	r1, r2, r1
 80018e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80018e2:	4649      	mov	r1, r9
 80018e4:	414b      	adcs	r3, r1
 80018e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80018f4:	4659      	mov	r1, fp
 80018f6:	00cb      	lsls	r3, r1, #3
 80018f8:	4651      	mov	r1, sl
 80018fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018fe:	4651      	mov	r1, sl
 8001900:	00ca      	lsls	r2, r1, #3
 8001902:	4610      	mov	r0, r2
 8001904:	4619      	mov	r1, r3
 8001906:	4603      	mov	r3, r0
 8001908:	4642      	mov	r2, r8
 800190a:	189b      	adds	r3, r3, r2
 800190c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001910:	464b      	mov	r3, r9
 8001912:	460a      	mov	r2, r1
 8001914:	eb42 0303 	adc.w	r3, r2, r3
 8001918:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800191c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001928:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800192c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001930:	460b      	mov	r3, r1
 8001932:	18db      	adds	r3, r3, r3
 8001934:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001936:	4613      	mov	r3, r2
 8001938:	eb42 0303 	adc.w	r3, r2, r3
 800193c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800193e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001942:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001946:	f7fe fc47 	bl	80001d8 <__aeabi_uldivmod>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <UART_SetConfig+0x2d4>)
 8001950:	fba3 1302 	umull	r1, r3, r3, r2
 8001954:	095b      	lsrs	r3, r3, #5
 8001956:	2164      	movs	r1, #100	@ 0x64
 8001958:	fb01 f303 	mul.w	r3, r1, r3
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	3332      	adds	r3, #50	@ 0x32
 8001962:	4a08      	ldr	r2, [pc, #32]	@ (8001984 <UART_SetConfig+0x2d4>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	095b      	lsrs	r3, r3, #5
 800196a:	f003 0207 	and.w	r2, r3, #7
 800196e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4422      	add	r2, r4
 8001976:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001978:	e106      	b.n	8001b88 <UART_SetConfig+0x4d8>
 800197a:	bf00      	nop
 800197c:	40011000 	.word	0x40011000
 8001980:	40011400 	.word	0x40011400
 8001984:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800198c:	2200      	movs	r2, #0
 800198e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001992:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001996:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800199a:	4642      	mov	r2, r8
 800199c:	464b      	mov	r3, r9
 800199e:	1891      	adds	r1, r2, r2
 80019a0:	6239      	str	r1, [r7, #32]
 80019a2:	415b      	adcs	r3, r3
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019aa:	4641      	mov	r1, r8
 80019ac:	1854      	adds	r4, r2, r1
 80019ae:	4649      	mov	r1, r9
 80019b0:	eb43 0501 	adc.w	r5, r3, r1
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	00eb      	lsls	r3, r5, #3
 80019be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019c2:	00e2      	lsls	r2, r4, #3
 80019c4:	4614      	mov	r4, r2
 80019c6:	461d      	mov	r5, r3
 80019c8:	4643      	mov	r3, r8
 80019ca:	18e3      	adds	r3, r4, r3
 80019cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80019d0:	464b      	mov	r3, r9
 80019d2:	eb45 0303 	adc.w	r3, r5, r3
 80019d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80019da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80019e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80019f6:	4629      	mov	r1, r5
 80019f8:	008b      	lsls	r3, r1, #2
 80019fa:	4621      	mov	r1, r4
 80019fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a00:	4621      	mov	r1, r4
 8001a02:	008a      	lsls	r2, r1, #2
 8001a04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001a08:	f7fe fbe6 	bl	80001d8 <__aeabi_uldivmod>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4b60      	ldr	r3, [pc, #384]	@ (8001b94 <UART_SetConfig+0x4e4>)
 8001a12:	fba3 2302 	umull	r2, r3, r3, r2
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	011c      	lsls	r4, r3, #4
 8001a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001a24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001a28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001a2c:	4642      	mov	r2, r8
 8001a2e:	464b      	mov	r3, r9
 8001a30:	1891      	adds	r1, r2, r2
 8001a32:	61b9      	str	r1, [r7, #24]
 8001a34:	415b      	adcs	r3, r3
 8001a36:	61fb      	str	r3, [r7, #28]
 8001a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a3c:	4641      	mov	r1, r8
 8001a3e:	1851      	adds	r1, r2, r1
 8001a40:	6139      	str	r1, [r7, #16]
 8001a42:	4649      	mov	r1, r9
 8001a44:	414b      	adcs	r3, r1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a54:	4659      	mov	r1, fp
 8001a56:	00cb      	lsls	r3, r1, #3
 8001a58:	4651      	mov	r1, sl
 8001a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a5e:	4651      	mov	r1, sl
 8001a60:	00ca      	lsls	r2, r1, #3
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	4603      	mov	r3, r0
 8001a68:	4642      	mov	r2, r8
 8001a6a:	189b      	adds	r3, r3, r2
 8001a6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001a70:	464b      	mov	r3, r9
 8001a72:	460a      	mov	r2, r1
 8001a74:	eb42 0303 	adc.w	r3, r2, r3
 8001a78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001a86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001a94:	4649      	mov	r1, r9
 8001a96:	008b      	lsls	r3, r1, #2
 8001a98:	4641      	mov	r1, r8
 8001a9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a9e:	4641      	mov	r1, r8
 8001aa0:	008a      	lsls	r2, r1, #2
 8001aa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001aa6:	f7fe fb97 	bl	80001d8 <__aeabi_uldivmod>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4b38      	ldr	r3, [pc, #224]	@ (8001b94 <UART_SetConfig+0x4e4>)
 8001ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	2264      	movs	r2, #100	@ 0x64
 8001aba:	fb02 f303 	mul.w	r3, r2, r3
 8001abe:	1acb      	subs	r3, r1, r3
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	3332      	adds	r3, #50	@ 0x32
 8001ac4:	4a33      	ldr	r2, [pc, #204]	@ (8001b94 <UART_SetConfig+0x4e4>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	095b      	lsrs	r3, r3, #5
 8001acc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ad0:	441c      	add	r4, r3
 8001ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ada:	677a      	str	r2, [r7, #116]	@ 0x74
 8001adc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001ae0:	4642      	mov	r2, r8
 8001ae2:	464b      	mov	r3, r9
 8001ae4:	1891      	adds	r1, r2, r2
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	415b      	adcs	r3, r3
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001af0:	4641      	mov	r1, r8
 8001af2:	1851      	adds	r1, r2, r1
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	4649      	mov	r1, r9
 8001af8:	414b      	adcs	r3, r1
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001b08:	4659      	mov	r1, fp
 8001b0a:	00cb      	lsls	r3, r1, #3
 8001b0c:	4651      	mov	r1, sl
 8001b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b12:	4651      	mov	r1, sl
 8001b14:	00ca      	lsls	r2, r1, #3
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4642      	mov	r2, r8
 8001b1e:	189b      	adds	r3, r3, r2
 8001b20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001b22:	464b      	mov	r3, r9
 8001b24:	460a      	mov	r2, r1
 8001b26:	eb42 0303 	adc.w	r3, r2, r3
 8001b2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b36:	667a      	str	r2, [r7, #100]	@ 0x64
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001b44:	4649      	mov	r1, r9
 8001b46:	008b      	lsls	r3, r1, #2
 8001b48:	4641      	mov	r1, r8
 8001b4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001b4e:	4641      	mov	r1, r8
 8001b50:	008a      	lsls	r2, r1, #2
 8001b52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001b56:	f7fe fb3f 	bl	80001d8 <__aeabi_uldivmod>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <UART_SetConfig+0x4e4>)
 8001b60:	fba3 1302 	umull	r1, r3, r3, r2
 8001b64:	095b      	lsrs	r3, r3, #5
 8001b66:	2164      	movs	r1, #100	@ 0x64
 8001b68:	fb01 f303 	mul.w	r3, r1, r3
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	3332      	adds	r3, #50	@ 0x32
 8001b72:	4a08      	ldr	r2, [pc, #32]	@ (8001b94 <UART_SetConfig+0x4e4>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	095b      	lsrs	r3, r3, #5
 8001b7a:	f003 020f 	and.w	r2, r3, #15
 8001b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4422      	add	r2, r4
 8001b86:	609a      	str	r2, [r3, #8]
}
 8001b88:	bf00      	nop
 8001b8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b94:	51eb851f 	.word	0x51eb851f

08001b98 <__libc_init_array>:
 8001b98:	b570      	push	{r4, r5, r6, lr}
 8001b9a:	4d0d      	ldr	r5, [pc, #52]	@ (8001bd0 <__libc_init_array+0x38>)
 8001b9c:	4c0d      	ldr	r4, [pc, #52]	@ (8001bd4 <__libc_init_array+0x3c>)
 8001b9e:	1b64      	subs	r4, r4, r5
 8001ba0:	10a4      	asrs	r4, r4, #2
 8001ba2:	2600      	movs	r6, #0
 8001ba4:	42a6      	cmp	r6, r4
 8001ba6:	d109      	bne.n	8001bbc <__libc_init_array+0x24>
 8001ba8:	4d0b      	ldr	r5, [pc, #44]	@ (8001bd8 <__libc_init_array+0x40>)
 8001baa:	4c0c      	ldr	r4, [pc, #48]	@ (8001bdc <__libc_init_array+0x44>)
 8001bac:	f000 f818 	bl	8001be0 <_init>
 8001bb0:	1b64      	subs	r4, r4, r5
 8001bb2:	10a4      	asrs	r4, r4, #2
 8001bb4:	2600      	movs	r6, #0
 8001bb6:	42a6      	cmp	r6, r4
 8001bb8:	d105      	bne.n	8001bc6 <__libc_init_array+0x2e>
 8001bba:	bd70      	pop	{r4, r5, r6, pc}
 8001bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bc0:	4798      	blx	r3
 8001bc2:	3601      	adds	r6, #1
 8001bc4:	e7ee      	b.n	8001ba4 <__libc_init_array+0xc>
 8001bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bca:	4798      	blx	r3
 8001bcc:	3601      	adds	r6, #1
 8001bce:	e7f2      	b.n	8001bb6 <__libc_init_array+0x1e>
 8001bd0:	08001c08 	.word	0x08001c08
 8001bd4:	08001c08 	.word	0x08001c08
 8001bd8:	08001c08 	.word	0x08001c08
 8001bdc:	08001c0c 	.word	0x08001c0c

08001be0 <_init>:
 8001be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be2:	bf00      	nop
 8001be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001be6:	bc08      	pop	{r3}
 8001be8:	469e      	mov	lr, r3
 8001bea:	4770      	bx	lr

08001bec <_fini>:
 8001bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bee:	bf00      	nop
 8001bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bf2:	bc08      	pop	{r3}
 8001bf4:	469e      	mov	lr, r3
 8001bf6:	4770      	bx	lr
